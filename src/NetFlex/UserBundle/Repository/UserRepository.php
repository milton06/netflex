<?php

namespace NetFlex\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{
	public function loadUserByUsername($username)
	{
		return $this->createQueryBuilder('U')
			->where('U.username = :username')
			->andWhere('U.status = 1')
			->setParameter('username', $username)
			->getQuery()
			->getOneOrNullResult();
	}
	
	public function findUserExistence($userId)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		
		$qb->select('partial U.{id, firstName, midName, lastName}')
			->from('NetFlexUserBundle:User', 'U')
			->where($qb->expr()->andX(
				$qb->expr()->eq('U.id', ':userId'),
				$qb->expr()->eq('U.status', 1)
			))
			->setParameters(['userId' => $userId])
			->setFirstResult(0)
			->setMaxResults(1);
		
		$user = $qb->getQuery()->getResult();
		
		return $user[0];
	}
	
	public function findUserEncryptedPassword($userId)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		
		$result = $qb->select('User.password')
					->from('NetFlexUserBundle:User', 'User')
					->where('User.id = :userId')
					->setParameter('userId', $userId)
					->getQuery()
					->getOneOrNullResult();
		
		return $result['password'];
	}
	
	public function findUserProfileImage($userId)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		
		$result = $qb->select('User.profileImage')
			->from('NetFlexUserBundle:User', 'User')
			->where('User.id = :userId')
			->setParameter('userId', $userId)
			->getQuery()
			->getOneOrNullResult();
		
		return $result['profileImage'];
	}
	
	public function findUsers($sortColumn, $sortOrder, $clientName, $clientStatus, $offset = null, $limit = null)
	{
		$query = "SELECT U.id, U.username, CONCAT(U.first_name, IFNULL(CONCAT(' ', U.mid_name), ''), ' ', U.last_name) fullname, U.created_on, U.status FROM users U LEFT JOIN user_roles UR ON U.id = UR.user_id WHERE UR.role_id = 3";
		
		if ($clientName) {
			$query .= " AND U.username LIKE '%" . $clientName . "%'";
			$query .= " OR CONCAT(U.first_name, IFNULL(CONCAT(' ', U.mid_name), ''), ' ', U.last_name) LIKE '%" . $clientName . "%'";
		}
		
		if ($clientStatus) {
			$query .= " AND U.status = $clientStatus";
		} else {
			$query .= " AND U.status != 0";
		}
		
		$query .= " ORDER BY $sortColumn $sortOrder";
		
		if ((null !== $offset) && (null !== $limit)) {
			$query .= " LIMIT $offset, $limit";
		}
		
		$stmt = $this->getEntityManager()->getConnection()->prepare($query);
		
		$stmt->execute();
		
		return $stmt->fetchAll();
	}
	
	public function findClientProfileData($id)
	{
		$rsm = new ResultSetMapping();
		
		$rsm->addEntityResult('NetFlexUserBundle:User', 'U');
		$rsm->addFieldResult('U', 'user_id', 'id');
		$rsm->addFieldResult('U', 'username', 'username');
		$rsm->addFieldResult('U', 'password', 'password');
		$rsm->addFieldResult('U', 'first_name', 'firstName');
		$rsm->addFieldResult('U', 'mid_name', 'midName');
		$rsm->addFieldResult('U', 'last_name', 'lastName');
		$rsm->addFieldResult('U', 'profile_image', 'profileImage');
		
		$rsm->addJoinedEntityResult('NetFlexUserBundle:Email', 'UE', 'U', 'emails');
		$rsm->addFieldResult('UE', 'email_id', 'id');
		$rsm->addFieldResult('UE', 'email', 'email');
		
		$rsm->addJoinedEntityResult('NetFlexUserBundle:Contact', 'UC', 'U', 'contacts');
		$rsm->addFieldResult('UC', 'contact_id', 'id');
		$rsm->addFieldResult('UC', 'contact_number', 'contactNumber');
		
		$sql = "
			SELECT 
			    U.id user_id,
			    U.username,
			    U.password,
			    U.first_name,
			    U.mid_name,
			    U.last_name,
			    U.profile_image,
			    UE.*,
			    UC.*
			FROM
			    users U
			        LEFT JOIN
			    (SELECT 
			        E.user_id, E.id email_id, E.email
			    FROM
			        emails E
			    WHERE
			        E.user_id = ? AND E.status = 1
			    ORDER BY E.is_primary DESC , E.id DESC
			    LIMIT 0 , 1) UE ON U.id = UE.user_id
			    	LEFT JOIN
			    (SELECT 
			        C.user_id, C.id contact_id, C.contact_number
			    FROM
			        contacts C
			    WHERE
			        C.user_id = ? AND C.status = 1
			    ORDER BY C.is_primary DESC , C.id DESC
			    LIMIT 0 , 1) UC ON U.id = UC.user_id
			WHERE
			    U.id = ? AND U.status = 1
		";
		
		$query = $this->getEntityManager()->createNativeQuery($sql, $rsm)->setParameters([1 => $id, 2 => $id, 3 => $id]);
		$resultSet = $query->getResult();
		
		return $resultSet;
	}
}

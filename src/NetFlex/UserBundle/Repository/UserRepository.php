<?php

namespace NetFlex\UserBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository
{
	public function findUserEncryptedPassword($userId)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		
		$result = $qb->select('User.password')
					->from('NetFlexUserBundle:User', 'User')
					->where('User.id = :userId')
					->setParameter('userId', $userId)
					->getQuery()
					->getOneOrNullResult();
		
		return $result['password'];
	}
	
	public function findUsers($sortColumn, $sortOrder, $clientName, $offset = null, $limit = null)
	{
		$query = "SELECT U.id, U.username, CONCAT(U.first_name, IFNULL(CONCAT(' ', U.mid_name), ''), ' ', U.last_name) fullname, U.created_on FROM users U LEFT JOIN user_roles UR ON U.id = UR.user_id WHERE UR.role_id = 3 AND U.status = 1";
		
		if ($clientName) {
			$query .= " AND U.username LIKE '%" . $clientName . "%'";
			$query .= " OR CONCAT(U.first_name, IFNULL(CONCAT(' ', U.mid_name), ''), ' ', U.last_name) LIKE '%" . $clientName . "%'";
		}
		
		$query .= " ORDER BY $sortColumn $sortOrder";
		
		if ((null !== $offset) && (null !== $limit)) {
			$query .= " LIMIT $offset, $limit";
		}
		
		$stmt = $this->getEntityManager()->getConnection()->prepare($query);
		
		$stmt->execute();
		
		return $stmt->fetchAll();
	}
	
	public function findUserExistence($userId)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		
		$qb->select('partial U.{id, firstName, midName, lastName}')
		->from('NetFlexUserBundle:User', 'U')
		->where($qb->expr()->andX(
			$qb->expr()->eq('U.id', ':userId'),
			$qb->expr()->eq('U.status', 1)
		))
		->setParameters(['userId' => $userId])
		->setFirstResult(0)
		->setMaxResults(1);
		
		$user = $qb->getQuery()->getResult();
		
		return $user[0];
	}
}

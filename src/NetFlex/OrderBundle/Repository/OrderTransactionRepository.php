<?php

namespace NetFlex\OrderBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * OrderTransactionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class OrderTransactionRepository extends EntityRepository
{
	
	public function countOrders($sortColumn, $sortOrder, $awbNumber, $invoiceNumber, $orderStatus, $paymentStatus, $fromDateObject, $toDateObject, $userId = null, $name = null)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		
		$qb->select('O')
			->from('NetFlexOrderBundle:OrderTransaction', 'O');
		
		if (('U.firstName' === $sortColumn) || ($name)) {
			$qb->addSelect('partial U.{id, firstName, midName, lastName}');
			$qb->leftJoin('O.userId', 'U');
		}
		
		if ($awbNumber) {
			$qb->where($qb->expr()->like('O.awbNumber', $qb->expr()->literal('%' . $awbNumber . '%')));
		}
		
		if ($invoiceNumber) {
			$qb->andWhere($qb->expr()->like('O.invoiceNumber', $qb->expr()->literal("%$invoiceNumber%")));
		}
		
		if ($name) {
			$qb->andWhere($qb->expr()->like($qb->expr()->concat('U.firstName', $qb->expr()->concat($qb->expr()->concat($qb->expr()->literal(' '), 'U.midName'), 'U.lastName')), $qb->expr()->literal("%$name%")));
		}
		
		if ($orderStatus) {
			$qb->andWhere($qb->expr()->eq('O.orderStatus', ':orderStatus'));
			$qb->setParameter('orderStatus', $orderStatus);
		} else {
			$qb->andWhere($qb->expr()->neq('O.orderStatus', 0));
		}
		
		if ($paymentStatus) {
			$qb->andWhere($qb->expr()->eq('O.paymentStatus', ':paymentStatus'));
			$qb->setParameter('paymentStatus', $paymentStatus);
		}
		
		if ($fromDateObject && ! $toDateObject) {
			$qb->andWhere('O.createdOn >= :fromDateObject');
			$qb->setParameter('fromDateObject', $fromDateObject);
		} elseif (! $fromDateObject && $toDateObject) {
			$qb->andWhere('O.createdOn <= :toDateObject');
			$qb->setParameter('toDateObject', $toDateObject);
		} elseif ($fromDateObject && $toDateObject) {
			$qb->andWhere('O.createdOn between :fromDateObject and :toDateObject');
			$qb->setParameters(['fromDateObject' => $fromDateObject, 'toDateObject' => $toDateObject]);
		} else {
			//
		}
		
		if ($userId) {
			$qb->andWhere($qb->expr()->eq('O.userId', ':userId'));
			$qb->setParameter(':userId', $userId);
		}
		
		$qb->orderBy($sortColumn, $sortOrder);
		
		$result = $qb->getQuery()->getResult();
		
		return count($result);
	}
	
	public function findOrders($offset, $limit, $sortColumn, $sortOrder, $awbNumber, $invoiceNumber, $orderStatus, $paymentStatus, $fromDateObject, $toDateObject, $userId = null, $name = null)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		
		$qb->select('O')
			->from('NetFlexOrderBundle:OrderTransaction', 'O');
		
		if (('U.firstName' === $sortColumn) || ($name)) {
			$qb->addSelect('partial U.{id, firstName, midName, lastName}');
			$qb->leftJoin('O.userId', 'U');
		}
		
		if ($awbNumber) {
			$qb->where($qb->expr()->like('O.awbNumber', $qb->expr()->literal("%$awbNumber%")));
		}
		
		if ($invoiceNumber) {
			$qb->andWhere($qb->expr()->like('O.invoiceNumber', $qb->expr()->literal("%$invoiceNumber%")));
		}
		
		if ($name) {
			$qb->andWhere($qb->expr()->like(
				$qb->expr()->concat(
					'U.firstName',
					$qb->expr()->concat(
						$qb->expr()->literal(' '),
						'U.lastName'
					)
				)
				, $qb->expr()->literal("%$name%")));
		}
		
		if ($orderStatus) {
			$qb->andWhere($qb->expr()->eq('O.orderStatus', ':orderStatus'));
			$qb->setParameter('orderStatus', $orderStatus);
		} else {
			$qb->andWhere($qb->expr()->neq('O.orderStatus', 0));
		}
		
		if ($paymentStatus) {
			$qb->andWhere($qb->expr()->eq('O.paymentStatus', ':paymentStatus'));
			$qb->setParameter('paymentStatus', $paymentStatus);
		}
		
		if ($fromDateObject && ! $toDateObject) {
			$qb->andWhere('O.createdOn >= :fromDateObject');
			$qb->setParameter('fromDateObject', $fromDateObject);
		} elseif (! $fromDateObject && $toDateObject) {
			$qb->andWhere('O.createdOn <= :toDateObject');
			$qb->setParameter('toDateObject', $toDateObject);
		} elseif ($fromDateObject && $toDateObject) {
			$qb->andWhere('O.createdOn between :fromDateObject and :toDateObject');
			$qb->setParameters(['fromDateObject' => $fromDateObject, 'toDateObject' => $toDateObject]);
		} else {
			//
		}
		
		if ($userId) {
			$qb->andWhere($qb->expr()->eq('O.userId', ':userId'));
			$qb->setParameter(':userId', $userId);
		}
		
		$qb->orderBy($sortColumn, $sortOrder);
		
		$qb->setFirstResult($offset);
		$qb->setMaxResults($limit);
		
		$result = $qb->getQuery()->getResult();
		
		return $result;
	}
}

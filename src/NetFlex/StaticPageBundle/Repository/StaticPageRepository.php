<?php

namespace NetFlex\StaticPageBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * StaticPageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class StaticPageRepository extends EntityRepository
{
    /**
     * counts static page records.
     *
     * @param  string   $searchTitle
     * @param  string   $searchSlug
     * @param  int      $searchStatus
     * @param  DateTime $searchFromDate
     * @param  DateTime $searchToDate
     * @param  string   $sortColumn
     * @param  string   $sortOrder
     *
     * @return int
     */
    public function countStaticPages($searchTitle, $searchSlug, $searchStatus, $searchFromDate, $searchToDate, $sortColumn, $sortOrder)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('SP')
        ->from('NetFlexStaticPageBundle:StaticPage', 'SP')
        ->where(
            $qb->expr()->neq('SP.status', 0) // All but permanently deleted static pages
        );
        
        if ($searchTitle) {
            $qb->andWhere(
                $qb->expr()->like('SP.title', ':searchTitle')
            )
            ->setParameter('searchTitle', "%$searchTitle%");
        }
    
        if ($searchSlug) {
            $qb->andWhere(
                $qb->expr()->like('SP.slug', ':searchSlug')
            )
            ->setParameter('searchSlug', "%$searchSlug%");
        }
    
        if ($searchStatus) {
            $qb->andWhere(
                $qb->expr()->eq('SP.status', ':searchStatus')
            )
            ->setParameter('searchStatus', $searchStatus);
        }
        
        if ($searchFromDate && ! $searchToDate) {
            $qb->andWhere(
                $qb->expr()->gte('SP.createdOn', ':searchFromDate')
            )
            ->setParameter('searchFromDate', $searchFromDate);
        } elseif (! $searchFromDate && $searchToDate) {
            $qb->andWhere(
                $qb->expr()->lte('SP.createdOn', ':searchToDate')
            )
            ->setParameter('searchToDate', $searchToDate);
        } elseif ($searchFromDate && $searchToDate) {
            $qb->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->between('SP.createdOn', ':searchFromDate', ':searchToDate')
                )
            )
            ->setParameter(':searchFromDate', $searchFromDate)
            ->setParameter(':searchToDate', $searchToDate);
        } else {
            //
        }
        
        $qb->orderBy("SP.$sortColumn", $sortOrder);
        
        $resultSet = $qb->getQuery()->getResult();
        
        return count($resultSet);
    }
    
    /**
     * finds static page records.
     *
     * @param  string   $searchTitle
     * @param  string   $searchSlug
     * @param  int      $searchStatus
     * @param  DateTime $searchFromDate
     * @param  DateTime $searchToDate
     * @param  string   $sortColumn
     * @param  string   $sortOrder
     * @param  int      $offset
     * @param  int      $limit
     *
     * @return array
     */
    public function findStaticPages($searchTitle, $searchSlug, $searchStatus, $searchFromDate, $searchToDate, $sortColumn, $sortOrder, $offset, $limit)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('SP')
            ->from('NetFlexStaticPageBundle:StaticPage', 'SP')
            ->where(
                $qb->expr()->neq('SP.status', 0) // All but permanently deleted static pages
            );
        
        if ($searchTitle) {
            $qb->andWhere(
                $qb->expr()->like('SP.title', ':searchTitle')
            )
            ->setParameter('searchTitle', "%$searchTitle%");
        }
        
        if ($searchSlug) {
            $qb->andWhere(
                $qb->expr()->like('SP.slug', ':searchSlug')
            )
            ->setParameter('searchSlug', "%$searchSlug%");
        }
    
        if ($searchStatus) {
            $qb->andWhere(
                $qb->expr()->eq('SP.status', ':searchStatus')
            )
            ->setParameter('searchStatus', $searchStatus);
        }
    
        if ($searchFromDate && ! $searchToDate) {
            $qb->andWhere(
                $qb->expr()->gte('SP.createdOn', ':searchFromDate')
            )
            ->setParameter('searchFromDate', $searchFromDate);
        } elseif (! $searchFromDate && $searchToDate) {
            $qb->andWhere(
                $qb->expr()->lte('SP.createdOn', ':searchToDate')
            )
            ->setParameter('searchToDate', $searchToDate);
        } elseif ($searchFromDate && $searchToDate) {
            $qb->andWhere(
                $qb->expr()->andX(
                    $qb->expr()->between('SP.createdOn', ':searchFromDate', ':searchToDate')
                )
            )
            ->setParameter(':searchFromDate', $searchFromDate)
            ->setParameter(':searchToDate', $searchToDate);
        } else {
            //
        }
        
        $qb->orderBy("SP.$sortColumn", $sortOrder)
        ->setFirstResult($offset)
        ->setMaxResults($limit);
        
        $resultSet = $qb->getQuery()->getResult();
        
        return $resultSet;
    }
    
    /**
     * find a static page by ID.
     *
     * @param  int   $id
     *
     * @return mixed
     */
    public function findAStaticPageById($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('SP, SPS')
        ->from('NetFlexStaticPageBundle:StaticPage', 'SP')
        ->leftJoin(
            'SP.staticPageSections',
            'SPS',
            'WITH',
            $qb->expr()->neq('SPS.status', 0) // All but inactive static page sections
        )
        ->where(
            $qb->expr()->andX(
                $qb->expr()->eq('SP.id', ':id'),
                $qb->expr()->neq('SP.status', 0)
            )
        )
        ->setParameter('id', $id)
        ->orderBy('SPS.position', 'ASC');
        
        $resultSet = $qb->getQuery()->getOneOrNullResult();
        
        return $resultSet;
    }
    
    /**
     * find static pages by title.
     *
     * @param  string $title
     *
     * @return mixed
     */
    public function findStaticPagesByTitle($title)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('SP')
        ->from('NetFlexStaticPageBundle:StaticPage', 'SP')
        ->where(
            $qb->expr()->andX(
                $qb->expr()->like('SP.title', ':title'),
                $qb->expr()->neq('SP.status', 0)
            )
        )
        ->setParameter('title', "%$title%");
        
        $resultSet = $qb->getQuery()->getResult();
        
        return $resultSet;
    }
    
    /**
     * find static pages by slug.
     *
     * @param  string $slug
     *
     * @return mixed
     */
    public function findStaticPagesBySlug($slug)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('SP')
        ->from('NetFlexStaticPageBundle:StaticPage', 'SP')
        ->where(
            $qb->expr()->andX(
                $qb->expr()->like('SP.slug', ':slug'),
                $qb->expr()->neq('SP.status', 0)
            )
        )
        ->setParameter('slug', "%$slug%");
        
        $resultSet = $qb->getQuery()->getResult();
        
        return $resultSet;
    }
    
    /**
     * find static pages by slug for displaying on front.
     *
     * @param  string $slug
     *
     * @return mixed
     */
    public function findStaticPageForFrontBySlug($slug)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
    
        $qb->select('SP')
        ->from('NetFlexStaticPageBundle:StaticPage', 'SP')
        ->leftJoin('SP.staticPageSections', 'SPS', 'WITH', $qb->expr()->neq('SPS.status', 0))
        ->where(
            $qb->expr()->andX(
                $qb->expr()->like('SP.slug', ':slug'),
                $qb->expr()->neq('SP.status', 0)
            )
        )
        ->orderBy('SPS.position', 'ASC')
        ->setParameter('slug', "%$slug%");
    
        $resultSet = $qb->getQuery()->getOneOrNullResult();
    
        return $resultSet;
    }
}

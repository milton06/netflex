<?php

namespace NetFlex\LocationBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr;

/**
 * CountryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CountryRepository extends EntityRepository
{
	public function findCountriesByName($countryName)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		
		return $qb->select('partial C.{id, name}')
			->from('NetFlexLocationBundle:Country', 'C')
			->where($qb->expr()->andX(
				$qb->expr()->like('C.name', $qb->expr()->literal("%$countryName%")),
				$qb->expr()->eq('C.status', 1)
			))
			->getQuery()
			->getResult();
	}
	
	public function findActiveCountries($defaultCountryId = null, $defaultStateId = null, $excludedStateIds = [],
                                        $mode = null)
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		
		return $qb->select('COUNTRY, STATE, CITY')
			->from('NetFlexLocationBundle:Country', 'COUNTRY')
			->innerJoin(
				'COUNTRY.states',
				'STATE',
				'WITH',
				$qb->expr()->andX(
					$qb->expr()->eq('STATE.countryId', (($defaultCountryId) ? $defaultCountryId : 1)),
					$qb->expr()->notIn('STATE.id', (($excludedStateIds) ? $excludedStateIds : [42, 43, 44, 45, 46, 47])),
					$qb->expr()->eq('STATE.status', 1)
				),
				'STATE.id'
			)
			->innerJoin(
				'COUNTRY.cities',
				'CITY',
				'WITH',
				$qb->expr()->andX(
					$qb->expr()->eq('CITY.countryId', (($defaultCountryId) ? $defaultCountryId : 1)),
					$qb->expr()->eq('CITY.stateId', (($defaultStateId) ? $defaultStateId : 41)),
					$qb->expr()->eq('CITY.status', 1)
				),
				'CITY.id'
			)
			->where($qb->expr()->eq('COUNTRY.status', 1))
			->orderBy('COUNTRY.id', 'ASC')
			->addOrderBy('STATE.name', 'ASC')
			->addOrderBy('CITY.name', 'ASC')
			->getQuery()
			->getResult();
	}
	
	public function findStatesAndCitiesByCountryId($countryId, $excludedStateIds = [])
	{
		$qb = $this->getEntityManager()->createQueryBuilder();
		
		return $qb->select('COUNTRY, STATE, CITY')
			->from('NetFlexLocationBundle:Country', 'COUNTRY')
			->leftJoin(
				'COUNTRY.states',
				'STATE',
				'WITH',
				$qb->expr()->andX(
					$qb->expr()->notIn('STATE.id', (($excludedStateIds) ? $excludedStateIds : [42, 43, 44, 45, 46, 47])),
					$qb->expr()->eq('STATE.status', 1)
				),
				'STATE.id'
			)
			->leftJoin(
				'STATE.cities',
				'CITY',
				'WITH',
				$qb->expr()->andX(
					$qb->expr()->eq('CITY.status', 1)
				),
				'CITY.id'
			)
			->where($qb->expr()->eq('COUNTRY.id', ':countryId'))
			->setParameter('countryId', $countryId)
			->addOrderBy('STATE.name', 'ASC')
			->addOrderBy('CITY.name', 'ASC')
			->getQuery()
			->getOneOrNullResult();
	}
    
    public function findCountryCount($countryName, $sortColumnFormatted, $sortOrderFormatted)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        
        $qb->select('COUNTRY')
            ->from('NetFlexLocationBundle:Country', 'COUNTRY');
        
        if ($countryName) {
            $qb->andWhere($qb->expr()->like('COUNTRY.name', ':countryName'))
            ->setParameter('countryName', "%$countryName%");
        }
        
        $qb->orderBy("COUNTRY.$sortColumnFormatted", $sortOrderFormatted);
        
        $resultSet = $qb->getQuery()->getResult();
        
        return count($resultSet);
    }
    
    public function findCountry($offset, $limit, $countryName, $sortColumnFormatted, $sortOrderFormatted)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
    
        $qb->select('COUNTRY')
        ->from('NetFlexLocationBundle:Country', 'COUNTRY');
    
        if ($countryName) {
            $qb->andWhere($qb->expr()->like('COUNTRY.name', ':countryName'))
            ->setParameter('countryName', "%$countryName%");
        }
    
        $qb->orderBy("COUNTRY.$sortColumnFormatted", $sortOrderFormatted);
        
        $qb->setFirstResult($offset)
        ->setMaxResults($limit);
        
        $resultSet = $qb->getQuery()->getResult();
        
        return $resultSet;
    }
}
